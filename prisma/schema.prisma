// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Project {
  id          Int        @id @default(autoincrement()) 
  title       String
  description String
  image       String?
  categories  Category[] @relation("ProjectCategories") // Many-to-many relationship
  createdAt   DateTime   @default(now()) 
  updatedAt   DateTime   @updatedAt
}

model Blog {
  id          Int        @id @default(autoincrement())
  title       String
  content     String
  image       String?
  categories  Category[] @relation("BlogCategories") // Many-to-many relationship
  createdAt   DateTime   @default(now()) 
  updatedAt   DateTime   @updatedAt
}

model Category {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  projects   Project[] @relation("ProjectCategories") // Many-to-many relationship with Project
  blogs      Blog[]    @relation("BlogCategories") // Many-to-many relationship with Blog
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  // Optional, for OAuth providers
  access_token       String?  // Optional, for OAuth providers
  expires_at         Int?     // Optional, for OAuth providers
  token_type         String?  // Optional
  scope              String?  // Optional
  id_token           String?  // Optional, for OAuth providers
  session_state      String?  // Optional
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String     @id @default(cuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}
